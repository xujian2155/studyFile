const { cookie， jsonp } = require("express/lib/response")；

1.雪碧图：
    就是把一个页面涉及到的所有零星图片等有规则的合并成一张大图中；即将多个图片融合到一张整图里面.
    在需要用到图片的时候，通过CSS属性background-image组合background-repeat ， background-position等来实现图片的显示


2.浏览器渲染：
    浏览器自顶向下解析HTML文档，解析的过程中会根据解析到的内容构建DOM树，
    解析到style标签(外联样式)会并行加载对应的资源，加载完成后解析样式构建样式规则，生成CSSOM树(js执行是单线程的，但浏览器并不是，所以其可以一边解析HTML，
    一边解析CSS)
    解析到script标签(这里说的是最普通的，defer和async属性后续会有详细介绍)时会停止HTML的解析并加载脚本，加载完成之后立即执行，随后HTML继续进行解析
    DOM树和样式规则也就是CSSOM树构建完成之后会进行合并，生成渲染树rendertree
    浏览器会对渲染树进行布局，目的是为了得到相关的布局信息，比如DOM元素在浏览器上的具体坐标和大小，最终生成布局树layouttree
    浏览器会对布局树进行绘制和分层，将布局树转换为对应的像素信息，最终传递给GPU将页面绘制出来呈现给用户

    含有defer属性的脚本在加载完之后不会立即执行，而是会放到一个队列中，等到HTML解析完成之后依次取出来执行，
    所以defer属性对应的脚本有个明显的特点就是脚本的执行顺序和出现在HTML文档中的顺序一致，而且它一定会在DOMContentLoaded事件触发之前执行，
    该事件下文中会进行详细的讲解，下面是MDN中对该属性的说明：
        这个布尔属性被设定用来通知浏览器该脚本将在文档完成解析后，触发DOMContentLoaded(en-US)事件前执行.
        有defer属性的脚本会阻止DOMContentLoaded事件，直到脚本被加载并且解析完成
    
        含有async属性的脚本执行时机就没有defer要求那么严格，它的执行时机并不确定，可能是在HTML解析完成前，此时会立即停止HTML的解析并执行脚本；
        还可能是在DOMContentLoaded事件触发后，此时HTML已经解析完成了，这种情况是有可能发生的，因为脚本什么时候加载好并不是确定的


3.DOMContentLoaded与load的区别：
    当纯HTML被完全加载以及解析时，DOMContentLoaded事件会被触发，而不必等待样式表，图片或者子框架完成加载
    load事件在整个页面及所有依赖资源如样式表和图片都已完成加载时触发.它与DOMContentLoaded不同，后者只要页面DOM加载完成就触发，无需等待依赖资源的加载
    总结：DOMContentLoaded标志DOM树构建完成，但页面中部分资源可能还没有加载完；load标志着页面中所有的资源都已加载完成，包括图片，视频等资源


4.Webpack/vite（基于rollup）、rollup（vue源码打包工具）以及gulp等打包工具（https://juejin.cn/post/7097493230572273700）：
    gulp更偏向将开发流程中让人痛苦或耗时的任务自动化，从而减少你所浪费的时间
    而webpack更侧重于模块化打包，也就是官网的那张图，将所有依赖的js，less，png等等打包为最终需要的模块.

    传统的webpack等工具会把代码打包成Bundle文件，而vite则是依赖原生的ES6 Moldel来实现的，vite借助了ESbuild
    总结：webpack的输出一个Bundle文件，而vite则使用bundleless文件，其特点就是不用形成一个完整的包，浏览器可以直接读取运行

    webpack为什么要对文件进行打包：
        HTTP/1.1各浏览器有并行连接限制
        浏览器不支持模块系统(如CommonJS包不能直接在浏览器运行)
        代码依赖关系与顺序管理

    为什么现在使用vite，不对文件进行打包：
        随着项目不断变大，启动和热更新所等待的时间越来越长
        HTTP/2.0多路并用
        各大浏览器逐一支持ESM，可以使用原生 ESM 和 原生 ESM 动态导入
        原生的解决了代码依赖和复用的问题
        越来越多的npm包拥抱ESM(尽管很多包的依赖并不是)

    Rollup除了直接使用使用 ES6 模块之外，Rollup 还静态分析代码中的 import，并将排除任何未实际使用的代码。这实际上直接实现于现代码和现有工具和模块之上，而不会增加额外的依赖或使项目的大小膨胀。
    rollup相对webpack更轻量，其构建的代码并不会像webpack一样被注入大量的webpack内部结构，而是尽量的精简保持代码原有的状态。它同样支持tree-shaking、依赖解析等能力，
    不过rollup的生态并没有webpack工具强大，目前它仍然是一个小众的打包构建工具，他也可以与webpack或gulp整合形成混合打包构建的能力，在vue3的推出的时间节点，
    下一代的打包构建工具vite横空出世，由于vite是基于rollup实现的打包构建能力，所以rollup才被更多的人认识和学习。


5.CommonJS和es6模块的区别：
    导出方式的不同：require和import，import命令具有提升效果，会在文件中优先执行
    动态与静态：require可以在任意地方使用，加载时直接拷贝一个输出的对象，import须放在文件开头，在加载时会标记一个引用，拿到的是输出值的一个映射.
        而对于复杂数据类型，由于CommonJS进行了浅拷贝，因此如果两个脚本同时引用了同一个模块，对该模块的修改会影响另一个模块
    缓存：require同一个模块时，CommonJS并不会多次执行该模块文件，而是在第一次加载时，将模块缓存
    this指向不同：一个是指向模块本身，一个是undefined


7.延迟加载/懒加载和预加载：
    预加载技术可以用到link优先对指定资源进行加载(<link ref="preload"></link>)
    预连接(<link ref="preconnect"></link>)
    预dns解析(<link ref="dns-prefetch"></link>)
    预提取：预提取最适合的场景就是为用户的下一步可能的操作做好必要的准备，
        比如在搜索框搜索内容时，可以预提取结果列表中首个内容的详情页，或者在使用搜索查询是，预提取搜索结果的下一页的内容
    
    懒加载：监控显示器大小以及scroll事件，从而灵活调整需要加载的内容

    另外：减少冗余的依赖，全局注册的组件，个别特殊文件(延时引入)，制定更合理的打包策略，减少chunk的体积


9.合理使用缓存：
    cookie：原始的浏览器的自带缓存，没什么好说的
    Memory Cache(sessionStorage)： 缓存在内存中的资源可以非常快速地被访问和加载，但是内存空间非常有限，所以这些资源只会在浏览器打开期间保存
    Disk CaChe(localStorage)： HTML，CSS，JavaScript文件等.与 Memory Cache 不同，Disk Cache 中的资源可以被长时间保存，即使浏览器关闭后也可以再次访问.
        但是，由于磁盘读取速度相对内存较慢，所以从磁盘中读取缓存的资源会比从内存中读取慢一些.
        通常情况下，浏览器会根据 HTTP 响应头中的缓存控制信息来决定是否将数据缓存到硬盘中
    Server Worker：后台的 JavaScript 脚本，是一个独立的线程，Service Worker可以缓存页面中的资源，例如 HTML，CSS，JavaScript文件，图像，字体等，可以使网站在离线状态下仍能够访问
    Push Cache： HTTP2.0中的内容，在Server Worker、Memory Cache、Disk Cache都没有命中的时候，它会被使用.在Session(会话)中存在，
        Session结束就会被释放，缓存时间短暂.

    分类：
        强缓存：(由浏览器决定是否使用缓存内容)强缓存是指直接从缓存中读取资源，而不需要向服务器发送请求，一般通过设置响应头来实现(响应头：Cache-AbortController，Expires)
        协商缓存(由服务器决定是否使用缓存内容)：协商缓存则是先向服务器发送请求，服务器根据请求头中的信息判断资源是否可以缓存，并返回相应的状态码和响应头信息，以告诉浏览器是否可以使用缓存.
            如果文件没有发生变化，则返回304状态码(响应头：Last-Modified，ETag)

        HTTP协议中的响应头部包含了控制缓存行为的各种指令和参数。这些头部字段包括Cache-Control、Expires、Last-Modified、ETag等

        Last-Modified 资源的最后修改时间
        Etag 资源的唯一标识
        Cache-Control和Expires（早期使用）都是控制缓存的过期时间

        强缓存 > 弱缓存   强缓存：cache-control > expires    弱缓存：ETag > Last-Modified


10.协商缓存为什么要有两种呢：
        有时候我们的网站是分布式部署在多台服务器上，一个资源文件可能在每台服务器上都有副本，相应地资源文件被修改时，新的文件要同步到各个服务器上，导致各个文件副本的修改时间不一定相同。
        那么当用户一次访问请求的服务器和另一次访问请求的服务器不同时，就有可能因为两个文件副本的修改时间不同而使得Last-Modified形式的协商缓存失效。
        如果这种情况采用Etag形式的协商缓存，根据文件内容而不是修改时间来判断缓存，就不会有这个问题了。


2.Html5新特性：
    标签语义化，等等
    增加多个表单输入类型，表单元素，表单属性
    Canvas 绘图，Canvas 通过 JavaScript 来绘制 2D 图形
    SVG 绘图，SVG 是指可伸缩的矢量图形，SVG 是一种使用 XML 描述 2D 图形的语言
    地理定位，Geolocation 用于定位用户的位置
    拖放 API，任何元素都能够拖放 drag
    Web Worker，Web Worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能
    Web Stroage，本地存储用户的浏览数据
    WebSocket，一种在单个 TCP 连接上进行全双工通讯的协议，浏览器通过 JavaScript 向服务器发出建立 WebSocket 连接的请求，连接建立以后，
    客户端和服务器端就可以通过 TCP 连接直接交换数据，当你获取 Web Socket 连接后，你就可以通过 send() 方法来向服务器发送数据，并通过 onmessage 事件来接收服务器返回的数据。


3.Css3新特性：
    transform 转换
    animation 动画
    渐变
    Filter 滤镜
    flex
    怪异盒模型
    媒体查询


4.Bfc：
    BFC是一个完全独立的空间(布局环境)，让空间里的子元素不会影响到外面的布局.那么怎么使用BFC呢，BFC可以看做是一个CSS元素属性
    解决问题：
        Float脱离文档流，高度塌陷
        Margin边距问题
    常用方法：
        display：inline-block

5.Css优化提高性能：
    合并文件，减少请求次数
    压缩文件，减少请求下载速度
    将css尽量放在外部，减少使用内联样式
    使用字体预加载(前面讲到的预加载link)
    使用媒体查询


6.sass和less：
    Sass 是在服务端处理的，以前是 Ruby，现在是 Dart-Sass 或 Node-Sass，而 Less 是在客户端处理的 
    Sass 的功能比 Less 强大，基本可以说是一种真正的编程语言.Less 只是一套自定义的语法及一个解析器，为 CSS 加入动态语言的特性


7.This：
    new绑定 > 硬绑定(bind) > 显式绑定(apply/call) > 隐式绑定 > 默认绑定(兜底规则)
    this在函数运行时才能确定指向的对象；高阶函数this指向window；自执行函数指向window；箭头函数找父作用域的this并且在编码时就已经确定，是静态的；new的this指向实例对象


8.Null undefined的区别：
    undefined 表示没值，而 null 则表示没有对象，而是对象的原始状态
    转成数字，null是0，undefined是NAN


9.闭包：
    EC 分为两个阶段，创建执行上下文和执行代码。
    每个 EC 可以抽象为一个对象，这个对象具有三个属性，分别为：作用域链 Scope，VO|AO(AO，VO 只能有一个)以及 this
    函数 EC 中的 AO 在进入函数 EC 时，确定了 Arguments 对象的属性；在执行函数 EC 时，其它变量属性具体化
    EC 创建的过程是由先后顺序的：参数声明 > 函数声明 > 变量声明
    理解闭包必须要先理解作用域EC，作用域栈ECS，垃圾回收机制：标记清除，
    由于父函数在执行时会创建AO，在父函数执行完毕后其执行上下文会被推出栈，但是由于子函数的scope指向父函数的ao，所以子函数和父函数ao都不会被销毁
    

12.Call apply bind：
    call：  a.call({}， 1，2，3，4，5) 得到的是一个结果，这个结果是函数的返回值，改变原对象
    bind： a.bind({}， 1，2，3，4，5) 返回一个新的函数，该函数与原始函数具有相同的函数体，但上下文已被永久绑定，与原对象无关
    apply： a.apply({}， [1，2，3，4，5]) 返回函数的返回值，改变原对象



13.跨域：
    jsonp
    CORS：
        cors是跨域资源共享，是一种基于 头的机制，该机制通过允许服务器标示除了它自己以外的其它 （域，协议和端口），使得浏览器允许这些 origin 访问加载自己的资源。
        服务端设置了Access-Control-Allow-Origin就开启了CORS，所以这种方式只要后端实现了CORS，就解决跨域问题，前端不需要配置。
    搭建本地后台中转服务器：
        服务器不受同源策略干扰，可以通过一个本地node中转层来解决
    nginx：
        客户端请求nginx服务器，在nginx.conf配置文件中配置server监听客户端的请求，然后把location匹配的路径代理到真实的服务器，
        服务器处理请求后返回数据，nginx再把数据给客户端返回
    websocket： 
        独立模块，本身不存在跨域问题，适用于长时间的双方交互式链接
        WebSocket 规范定义了一个在 Web 浏览器和服务器之间建立："套接字"连接的 API. 简单来说：客户端和服务器之间存在持久连接，双方可以随时开始发送数据.
    fetch：
        Fetch API通过CORS(跨域资源共享)协议实现跨域.在服务端设置响应头Access-Control-Allow-Origin就可以允许指定的域名访问资源


14.继承：
    原型链继承：在构造函数的原型上扩展属性和方法
    原型继承：使用 `Object.create()`
    构造函数继承：只能继承父类的私有属性和方法，无法继承父类原型的属性和方法
    组合式继承：两次调用了构造函数，且子类实例的原型链不干净，包含了父类的私有属性和方法
    寄生式继承：相当于拷贝了一个新对象
    组合寄生式继承：call等方法继承父类的私有属性和方法，将父函数的原型对象赋值给一个空对象，再将这个空对象直接赋值给子函数的原型对象
    class继承
    

15.原型链：
    构造函数的prototype指向原型对象
    构造函数new出来的实例对象的_proto_指向原型对象
    原型对象也是由其构造函数实例化而成，而且其constructor指向原本的构造函数


16.Promise：
    promise是一个类，这个类包含一系列的方法，去实现它的功能.
    


17.Async await：
    是promise的语法糖，可以减少promise的直接使用.

    主要作用就是解决promise中链式调用过于麻烦的问题，
    async作用于普通函数，返回一个promise对象
    await用于async函数，用于阻塞代码

    Promise 是基于约定管理异步编程，async/await 是基于 Generator 管理异步编程
    Promise 可以通过 then 的第二个参数 和 catch 捕获异常，async/await 通过 try catch 捕获异常


18.Vue和react以及angular的异同点：
    Angular：
    Angular 是由 Google 开发的开源、免费的 Javascript 框架，在前端框架方面被认为是最好的框架之一。
        Angular的优点：
            1.在 Angular 中开发应用程序非常容易。
            2.Angular 可以将单个块分配到多个块中，因此，开发人员可以轻松地单独对组件进行操作。
            3.Angular 享有大量社区支持，因为它是可用的最古老的框架。
            4.由于它具有基于组件的结构，因此可以再次使用其组件。
            5.Angular 的编程质量非常高，因此给程序员带来了良好的编程感觉。
            6.它由内置功能组成。
            7.angular使用的就是脏检查

    react：
        1.它有许多工具允许开发人员使用它并进行更改。
        2.React 享有良好的社区支持，开发人员和用户不断为它做出贡献以保持其相关性。
        3.React 有一个简单的学习曲线，它不需要复杂的学习来编码。
        4.它具有高效率和灵活性。因此，它的性能提高了。
        5.diff算法

    vue：
        1.Vue 是最轻的框架，只有 20KB，而且工作简单。
        2.它很容易与其他编程语言集成。
        3.在 Vue 上工作更容易，因为它具有简单的学习曲线。
        4.由于体积小，Vue 提供了更快的性能。
        5.用户已经开始切换到它而不是其他选项。
        6.数据劫持/代理


19.Webpack如何对项目进行优化：
    webpack的性能优化较多，我们可以对其进行分类： 
        优化一：打包后的结果，上线时的性能优化。（比如分包处理、减小包体积、CDN服务器等）
        优化二：优化打包速度，开发或者构建时优化打包速度。（比如exclude、cache-loader等）
    
    大多数情况下，我们会更加侧重于优化一，这对于线上的产品影响更大。
    在大多数情况下webpack都帮我们做好了该有的性能优化： 
        比如配置mode为production或者development时，默认webpack的配置信息；
        但是我们也可以针对性的进行自己的项目优化:
            代码分离:
                多入口
                动态导入
                自定义分包-SplitChunks

            CDN优化：
                在开发中，我们使用CDN主要是两种方式： 
                    方式一：打包的所有静态资源，放到CDN服务器， 用户所有资源都是通过CDN服务器加载的；
                    方式二：一些第三方资源放到CDN服务器上；
  
                配置CDN服务器
                配置第三方库的CDN服务器

            提取css资源：
            打包文件命名
            代码压缩：terser
            tree-shaking(消除死代码)
            scope hoisting(作用域提升)

            


20.首屏优化：
    使用骨架屏
    加载动画
    视频加速：
        延迟加载视频，先加载骨架
        使用预加载：
            preload 属性：可以用这个属性控制加载视频时的内容大小(无，关键信息，全部)
            使用 Preload Link：预加载中已经讲到过
            通过 HTTP Range 请求头来获取开始的一小段视频数据，然后使用 MediaSource API 来进行视频媒体数据的暂存与播放
            使用第三方工具：Guess.js工具包等

    检验标准：
        FCP(First Contentful Paint)：白屏时间(第一个文本绘制时间)
        Speed Index：首屏时间
        TTI(Time To Interactive)： 第一次可交互的时间
        lighthouse score(performance)：Chrome浏览器审查工具性能评分(也可以npm install -g lighthouse，编程式调用)


21.跨终端做适配：
    通过css判断不同的终端显示不同的样式
    两套页面适配不同终端，比如淘宝网就是两套页面做适配，根据用户终端，跳转至不同的页面，这套方案可以更加灵活的做适配
    一套页面，然后两套样式+js 判断当前是哪个类型的终端；


22.Mvvm和mvc和mvp：
    mvc：（model-view-controller，其中controller只是一个路由层）将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，
        不需要重新编写业务逻辑。业务逻辑主要放在view层。
    mvp：(model-view-presenter)view和model之间没有联系，任何通信都是通过presenter传递。业务逻辑主要放在presenter层面，view没有主动性。
    mvvm：(model-view-viewmodel)有点类似mvp，但是model和view都可以影响到viewmodel层，view是带有主动性的，是一种双向的数据传递的模式。


23.Vue组件通信传值：
    通过 props 传递
    $emit 触发自定义事件
    使用 ref
    EventBus
    Provide 与 Inject
    $parent
    Vuex/pinia
    vue-router(query,params)
    插槽
    本地存储


24.Vue双向绑定原理：
    v2主要有几个核心，第一个是observer类，第二个是dep类，第三个是watcher类，还有一个compile类，两条路线，第一条是解析数据，第二条是解析模板；在几个核心类中，observer类主要是作为主线核心，承载关于vue模板的各种操作，比如说递归解析data并操作其getter、setter；再比如在observer里面管理着其他几个核心类的使用，第二个是dep类，dep类是生成一个容器，这个容器的主要作用就是存储和某个具体data相关联的watcher，并且在重新给data赋值的时候调用其中的notify方法重新刷新视图，第三个watcher类，这个类主要是记录上次数据的旧值，并且在data数据改动的时候，调用update方法，去重新刷新给模板赋值；第四个是compile，其作用就是解析模板，在解析模板的时候，其一是生成watcher，并添加到data数据专属的watchers中，其二就是进行模板的指令解析并绑定


25.Vue生命周期的理解：
    beforeCreate
    created 
    beforeMount 
    mounted
    beforeUpdate 
    updated 
    beforeDestroy
    destroyed

    onBeforeMount
    onMounted
    onBeforeUpdate
    onUpdated
    onBeforeUnmount
    onUnmounted


26.Vuex和Pinal的区别：
    Pinia没有mutation,他只有state，getters，action【同步、异步】使用它来修改state数据
    Pinia语法上比vuex更容易理解和使用，灵活
    Pinia没有modules配置，每一个独立的仓库都是definStore生成出来的
    Pinia的state是一个在函数中返回的对象，和vue组件中的data编写方式差不多


27.有多少种模式，分别是什么样子：
    创造者模式：
        ！工厂模式
        ！抽象工厂模式
        ！单例模式
        ！建造者模式
        原型模式

    结构型模式：
        ！适配器模式
        桥接模式
        过滤器模式
        组合模式
        装饰器模式
        外观模式
        ！享元模式
        ！代理模式

    行为型模式：
        责任链模式
        命令模式
        解释器模式
        迭代器模式
        中介者模式
        备忘录模式
        ！观察者模式
        状态模式
        空对象模式
        ！策略模式
        模板模式
        访问者模式


28.深浅拷贝：
    浅拷贝：
        object.assign
        { ...obj }
        concat 拷贝数组
        slice 拷贝数组

    深拷贝：
        JSON.stringify
        手写循环；注意在循环的时候可能会出现循环引用，这里需要new Set()或者new weakMap



29.generator和iterator:
    生成器模型，关键字是yield、function*,next()
    生成器和iterator可以组成一个


30.Computed和watch的区别：
    vue2的watch有三类：
        computed watcher
        user watcher
        render watcher
    
    1、computed 和 watch 都是基于 watcher 实现的
    1、computed 是具有缓存的，依赖的值不发生变化，不会重新计算值
    3、watch 是监控值的变化，当值变化后就调用对应的回调函数

    其中user watcher：
        1、支持异步操作；
        2、watch是监听器，可以监听某一个数据，然后执行相应的操作；
        3、如果data中没有相应的属性的话，是不能watch的，这点和computed不一样

    computed:
        1、 不支持异步，当computed内有异步操作时无效，无法监听数据的变化；
        2、 computed是计算属性，也就是依赖某个值或者props通过计算得来的数据；


31.事件循环机制：
    js引擎是单线程的，在执行主线程的同步任务时会将遇到的宏任务和微任务添加到各自的宏任务队列和微任务队列，等同步代码执行完成，浏览器会优先将微任务队列填入执行栈中，当微任务队列清空，才会开始执行当前的宏任务队列，在执行过程中再次遇到的异步任务会按照之前讲的这个规则继续添加到各自的任务队列中。
    nextTick（微任务）优先级比微任务还高，只要一个阶段的任务执行完之后，就会去先清理完 nextTick 队列，再去清理其他的微任务队列。

    浏览器：
        宏任务：
            setTimeout
            setInterVal
            requestFrameAnimation
            I/O
            ajax/fetch

        微任务：
            Promise
            await
            MutationObserver

    node：
        宏任务：
            - setImmediate
            - setTimeout
            - setInterval
            - I/O
        微任务：
            - Promise
            - process.nextTick


32.vue的beforeCreate和created之间发生了什么
    从vue源码来看主要是做了三个动作：initInjections, initState, initProvide，我们主要关注的也是initstate，在这个方法里面，主要是为vm实例初始化了存放观察者的_watchers属性， 然后依次对props，methods，data，computed，watch属性进行了初始化与观察者的注册。
    
    
23.内存泄漏：
    1.1 不正当的闭包
    1.2 隐式全局变量
    1.3 游离DOM引用
    1.4 定时器
    1.5 事件监听器
    1.6 Map、Set对象


33.垃圾回收：
    标记清除：
        创建一个根对象，例如window对象；
        遍历根对象及其所有引用的对象，并标记它们是可达对象；
        遍历内存中所有对象，如果发现某个对象未被标记，就将其清除。
        在JavaScript中，标记清除算法是由浏览器自动完成的，开发者无需手动实现。

    引用计数：
        给每个对象添加一个引用计数器，初始值为0；
        当对象被引用时，引用计数器加1；
        当对象不再被引用时，引用计数器减1；
        当引用计数器为0时，就将该对象清除。
        
    引用计数法已经很少再使用，因为使用引用计数的清除法会在循环引用的时候造成内存泄漏

    如何避免内存泄漏：
        显式释放引用
        使用WeakMap和WeakSet
        避免循环引用的数据结构设计
        使用事件委托
        及时解绑事件处理程序
        使用垃圾回收器的工具和分析：
            Chrome DevTools里的Performance面板和Memory面板，先Performance的内存的下限是否在不断升高来判断是否存在有可能发生内存泄漏，再用Memory面板来进一步定位泄漏的源头，这个面板有3个工具，分别是堆快照、内存分配情况和内存分配时间轴，其中内存分配时间轴和堆快照比较有用，时间轴用来定位内存泄漏操作，对快照用来具体分析问题


34.Js为什么是单线程：
    因为这是最符合js的运行环境的方式，举个非常简单的例子，如果是多线程，在两个地方同时要对一个dom进行操作，那么会导致这个dom的混乱。
    
    JS是单线程的，不能同时处理多个事情
        1. JS中大部分代码都是同步线程
        2. 但是可以基于单线程的 EventLoop(事件循环机制) 实现异步效果
  
    浏览器是多线程的，打开一个页面，浏览器会分配很多线程，同时处理
        + GUI渲染线程：自上而下渲染页面
        + JS引擎(渲染)线程：JS单线程是因为浏览器只会开辟这一个线程用来执行JS代码
        + HTTP网络请求线程：加载资源文件和数据
        + 定时器监听线程：监听定时器是否到达时间
        + DOM事件监听线程：监听 DOM 事件的触发


1.垂直居中：
    flex布局：
        align-items: center; 
        justify-content: center

    position: absolute：
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        margin: auto

    position: absolute：
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);

    line-height + vertical-align：
        父元素：text-align: center;
        子元素：vertical-align: middle;


2.左侧固定右侧自适应：
    flex：
        flex:1

    grid:
        父元素：
            display：gird; gird-template-columns: 300px 1fr
            这个的意思是第一列宽度为300px，下一列的宽度自适应


3.Bigint：
    BigInt是一种内置对象，提供了一种方法来表示大于2^53 - 1 的整数

    javascript浮点数的64个二进制位
    第1位： 符号位，0表示正数，1表示负数 (1位)
    第2位到第12位： 储存指数部分 (11位)
    第13位到第64位：储存小数部分（即有效数字 52位）


4.如何判断一个值是数组：
    typeof
    instanceof
    Array.isArray
    Object.prototype.toString.call()
    arr.__proto__ === Array.prototype


5.如何判断某字符串是以‘abc’开始：
    startWith
    正则
    str[0] = a...
    切割之后对比：substring（0， 3）


6.数组扁平化：
    递归
    reduce
    拓展运算符
    flat函数：flat() 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。
        语法为：：const newArr = arr.flat(2),当传入为infinity时会递归到最深层


7.进程和线程的区别：
    在早期的操作系统中并没有线程的概念，进程是能拥有资源和独立运行的最小单位，也是程序执行的最小单位。任务调度采用的是时间片轮转的抢占式调度方式，而进程是任务调度的最小单位，每个进程有各自独立的一块内存，使得各个进程之间内存地址相互隔离。

    后来，随着计算机的发展，对CPU的要求越来越高，进程之间的切换开销较大，已经无法满足越来越复杂的程序的要求了。于是就发明了线程，线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元，是处理器调度和分派的基本单位。一个进程可以有一个或多个线程，各个线程之间共享程序的内存空间。


9.Option预请求：
    我们的请求都是CORS跨域请求，而CORS跨域请求，又分为非简请求和简单请求，只有在认定请求为非简请求的时候，才会发送预检请求，简单请求必须要满足以下条件：
        1、只使用以下HTTP方法之一：GET、HEAD或POST
        2、只使用以下HTTP头部：Accept、Accept-Language、Content-Language、Content-Type
        3、Content-Type的值仅限于：application/x-www-form-urlencoded、multipart/form-data或text/plain


10.用css画一个扇形：
    clip: rect(a b c d)
    border-radius
    外加translate旋转


13.值的检测方式以及各自的特点:
    typeof: 其中数组、对象、null都会被判断为object，其他判断都正确
    instanceof: instanceof只能正确判断引用数据类型,而不能判断基本数据类型
    constructor: 如果创建一个对象来改变它的原型,constructor就不能用来判断数据类型了
    Object.prototype.toString.call(): 万能


14.Css选择器:
    样式优先级：
        important
        内联样式
        ID选择器
        类和伪类选择器
        标签选择器
        通配符选择器(*)


15.三次握手四次挥手的过程:
    第一次握手：客户端向服务器发送一个带有SYN标志的数据包，表示请求建立连接。客户端将随机生成一个初始序列号（ISN）并将其放入SYN字段中。

    第二次握手：服务器接收到客户端的请求后，会发送一个带有SYN和ACK标志的数据包作为响应。服务器将确认序列号（ACK）设置为客户端的ISN加一，并生成自己的初始序列号。

    第三次握手：客户端收到服务器的响应后，会发送一个带有ACK标志的数据包作为确认。客户端将确认序列号设置为服务器的ISN加一。

    第一次挥手：客户端发送一个带有FIN（结束）标志的数据包，表示自己已经没有数据要发送了，请求关闭连接。

    第二次挥手：服务器接收到客户端的结束请求后，会发送一个带有ACK（确认）标志的数据包作为响应，表示已收到客户端的结束请求。

    第三次挥手：服务器发送一个带有FIN标志的数据包，表示自己也没有数据要发送了，请求关闭连接。

    第四次挥手：客户端接收到服务器的结束请求后，会发送一个带有ACK标志的数据包作为确认，表示已收到服务器的结束请求。


16.Js创建对象的方法:
    const obj = {}
    Object.create()
    new方法

    new
    字面量
    工厂模式
    构造函数
    原型模式
    混合模式
    

17.实现一个new:
    创建一个空的简单JavaScript对象，即 {}
    将构造函数的作用域赋给新对象（this指向新对象）
    执行构造函数中的代码（为新对象添加属性）
    如果该函数没有返回对象，则返回this


19.SSR和CSR以及SSG:
    1.SPA是单页面应用，也称为客户端渲染（CSR），SSR是服务端渲染，也称为多页面应用（MPA），
    2.SPA应用只会首次请求html文件，后续只需要请求JSON数据即可，因此用户体验更好，节约流量，服务端压力也较小。但是首屏加载的时间会变长，而且SEO不友好。为了解决以上缺点，就有了SSR方案，由于html
        在服务端一次性生成出来，首屏加载就会更快，更好的 SEO（搜索引擎爬取工具可以抓取渲染好的页面）
    3.在选择上，如果我们的应用存在首屏加载优化需求，SEO（搜索引擎优化）需求时，就可以考虑
    4.服务端渲染只支持 beforCreate 和 created 两个钩子函数，这会导致一些外部扩展库需要特殊处理，才能在服务端渲染应用程序中运行；并且与可以部署在任何静态文件服务器上的完全静态单页面应用程序
        SPA 不同，服务端渲染应用程序，需要处于 Node.js server 运行环境；
    5.SSR需要更多的服务器负载：在 Node.js 中渲染完整的应用程序，会比仅仅提供静态文件的 server 更加大量占用CPU 资源 (CPU-intensive – CPU 密集)，因此如果你预料在高流量环境 ( high traffic )
        下使用，请准备相应的服务器负载，并明智地采用缓存策略。

    SSG全称是 Static Site Generation ，代表的是静态站点生成。在构建的时候直接把结果页面输出html到磁盘，每次访问直接把html返回给客户端，相当于一个静态资源：
        优点：  减轻服务器压力，可以把生成的静态资源（html）放到CDN上，合理利用缓存
                有利于SEO，由于html已经提前生成好，不需要服务端和客户端去渲染

        缺点：  只适用于静态数据，对于经常改动的数据，需要每次重新生成页面。
                用户体验不好，每次打开新页面都需要重新渲染整个页面，不能只渲染可变区域


22.Buffer和cache的区别:
    Buffer的核心作用是用来缓冲，缓和冲击。Cache的核心作用是加快取用的速度。
    Buffer（缓冲区）是一种暂存数据的区域，通常是在输入输出设备和主存之间设置的。它的主要作用是协调两个速度不同的设备之间的数据传输，缓冲区能够接收来自一个设备的数据并将其存储在一个特定的位置，然后再将数据传输给另一个设备。缓冲区可以减少数据传输的延迟，提高系统的吞吐量。例如，在音频和视频流传输中，为了确保无间断的传输，系统通常会使用一个缓冲区来暂存数据。
    Cache（高速缓存）是一种用于提高计算机系统性能的技术。它通过将频繁访问的数据存储在更快的存储设备中，从而减少访问主存的次数，加快数据访问速度。Cache通常被分为多级，每一级Cache的大小和速度都不同，但是它们都是用于暂存数据的。CPU中的Cache主要用于暂存最近访问的指令和数据，这样可以避免频繁从主存中读取数据，从而提高系统性能。

    buffer：比如你每秒要写100次硬盘，对系统冲击很大，浪费了大量时间在忙着处理开始写和结束写这两件事嘛。用个buffer暂存起来，变成每10秒写一次硬盘，对系统的冲击就很小，写入效率高了，日子过得爽了。极大缓和了冲击。

    cache：比如你一个很复杂的计算做完了，下次还要用结果，就把结果放手边一个好拿的地方存着，下次不用再算了。加快了数据取用的速度。


23.axios强行中断原理：
    在发起请求的时候传入了 cancelToken，也就是 CancelToken 的一个实例。实例化的过程中会调用我们传入的 executor函数，与此同时将 cancel 函数传递给我们外部。另外这个实例上有一个 promise 的属性，当我们调用 cancel 函数，promise 则会从 pending 的状态变成 fulfilled。从而触发 promise.then，执行所有的 token._listeners,在具体的listener中会调用XMLHttpRequest 的 abort 方法取消请求。

    从 v0.22.0 开始，Axios 支持以 fetch API 方式—— AbortController 取消请求
        const controller = new AbortController();

        axios.get('/foo/bar', {
            signal: controller.signal
        }).then(function(response) {

        controller.abort()


4.回流重绘：
    重绘：不需重新计算元素的几何属性、直接为该元素绘制新的样式。这个过程叫做重绘。
    回流：重新生成布局，重新排列元素


5.优化动画：
    优化JavaScript的执行效率：requestAnimationFrame代替setTimeout和setInterval
    避免大规模、复杂的布局：避免频繁改变布局
    GPU加速：将移动或渐变元素由渲染层（RenderLayer）提升为合成层（Compositing Layer），避免提升合成层的陷阱


6.documentFragment是什么，用这个和直接操作dom的区别是什么：
    DocumentFragment，文档片段接口，一个没有父对象的最小文档对象。它被作为一个轻量版的 Document使用，就像标准的document一样，存储由节点（nodes）组成的文档结构。与document相比，最大的区别是DocumentFragment不是真实 DOM 树的一部分，它的变化不会触发 DOM 树的重新渲染，且不会导致性能等问题。

    当我们把一个 DocumentFragment 节点插入文档树时，插入的不是 DocumentFragment 自身，而是它的所有子孙节点。在频繁的DOM操作时，我们就可以将DOM元素插入DocumentFragment，之后一次性的将所有的子孙节点插入文档中。和直接操作DOM相比，将DocumentFragment 节点插入DOM树时，不会触发页面的重绘，这样就大大提高了页面的性能。


7.节流与防抖：
    节流会强制执行一个函数在一段时间内可以被调用的最大次数。如“最多每 100 毫秒执行一次此函数”
    防抖强制一个函数在一段时间内没有被调用之前不会被再次调用。如“仅当 100 毫秒过去了而没有被调用时才执行此函数”


14.路由传参：
    1、query用path编写传参地址，而params用name编写传参地址；2、query刷新页面时参数不会消失，而params刷新页面时参数会消失；3、query传的参数会显示在url地址栏中，而params传参不会显示在地址栏中
    params：
    query：
    meta：
    props：


15.路由模式：
    hash：hash模式是一种把前端路由的路径用井号 # 拼接在真实 URL 后面的模式。当井号 # 后面的路径发生变化时，浏览器并不会重新发起请求，而是会触发 hashchange 事件。
    history：history API 是 H5 提供的新特性，允许开发者直接更改前端路由，即更新浏览器 URL 地址而不重新发起请求。需要后端配合否则容易404。


16.路由守卫：
    beforeEach
    beforeResolve
    afterEach
    beforeEnter
    beforeRouteEnter
    beforeRouteUpdate
    beforeRouteLeave

    导航被触发。
    在失活的组件里调用 beforeRouteLeave 守卫。
    调用全局的 beforeEach 守卫。
    在重用的组件里调用 beforeRouteUpdate 守卫(2.2+)。
    在路由配置里调用 beforeEnter。
    解析异步路由组件。
    在被激活的组件里调用 beforeRouteEnter。
    调用全局的 beforeResolve 守卫(2.5+)。
    导航被确认。
    调用全局的 afterEach 钩子。
    触发 DOM 更新。
    调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入


18.网络七层：
    物理层
    数据链路层
    网络层
    运输层
    会话层
    表示层
    应用层


19.http和https：
    http的状态码：
    http和https都是网络七层中的应用层协议，基于tcp传输协议，主要包含请求行、请求头、请求体：
        请求行：请求方式，请求资源，协议版本

        请求头：cookie、user-agent、connection、Cache-Control等等

        请求体：
            当请求方式是post时，请求体会有请求参数格式如下：
                username=zhangsan&password=123
            当请求方式时get时，请求参数是不会出现在请求体中，会拼接在url地址后面：
                http://localhost:8080...？username=zhangsan&password=123

    HTTPS在传输数据之前需要客户端(浏览器)与服务端(网站)之间进行一次握手，在握手过程中将确立双方加密传输数据的密码信息。握手过程的具体描述如下：

        1. 浏览器将自己支持的一套加密规则发送给网站。

        2.网站从中选出一组加密算法与HASH算法，并将自己的身份信息以证书的形式发回给浏览器。证书里面包含了网站地址，加密公钥，以及证书的颁发机构等信息。

        3.浏览器获得网站证书之后浏览器要做以下工作：

            a) 验证证书的合法性(颁发证书的机构是否合法，证书中包含的网站地址是否与正在访问的地址一致等)，如果证书受信任，则浏览器栏里面会显示一个小锁头，否则会给出证书不受信的提示。

            b) 如果证书受信任，或者是用户接受了不受信的证书，浏览器会生成一串随机数的密码，并用证书中提供的公钥加密。

            c) 使用约定好的HASH算法计算握手消息，并使用生成的随机数对消息进行加密，最后将之前生成的所有信息发送给网站。

        4.网站接收浏览器发来的数据之后要做以下的操作：

            a) 使用自己的私钥将信息解密取出密码，使用密码解密浏览器发来的握手消息，并验证HASH是否与浏览器发来的一致。

            b) 使用密码加密一段握手消息，发送给浏览器。

        5.浏览器解密并计算握手消息的HASH，如果与服务端发来的HASH一致，此时握手过程结束，之后所有的通信数据将由之前浏览器生成的随机密码并利用对称加密算法进行加密。


19.socket，Websock，http和tcp，udp的联系：
    tcp，udp是传输层协议
    socket是tcp，udp向外暴露的接口，相当于是一个包着tcp和upd的工具包
    websocket和http都是应用层协议：
        websocket 是持久连接，http 是短连接；
        websocket 的协议是以 ws/wss 开头，http 对应的是 http/https；
        websocket 是有状态的，http 是无状态的；
        websocket 连接之后服务器和客户端可以双向发送数据，http 只能是客户端发起一次请求之后，服务器才能返回数据；
        websocket 是可以跨域的；
        websocket 连接建立之后，数据的传输使用帧来传递，不再需要Request消息。

        都是 TCP 协议；
        都使用 Request/Response 模型进行连接的建立；
        websocket 是基于 http 的，他们的兼容性都很好；
        在连接的建立过程中对错误的处理方式相同；


20.Tcp和udp以及quic：
    都是传输层的协议，TCP是基于连接的，而UDP是基于非连接的，quic则是基于udp的新一代传输层协议

    tcp：通过其三次握手，四次挥手，保证协议的安全和完整性，往往用于不那么强调时效性的场景，比如微信的文字沟通，文件发送等。
        通道的建立——三次握手：
            （1）在建立通道时，客户端首先要向服务端发送一个SYN同步信号。
            （2）服务端在接收到这个信号之后会向客户端发出SYN同步信号和ACK确认信号。
            （3）当服务端的ACK和SYN到达客户端后，客户端与服务端之间的这个“通道”就会被建立起来。
        通道的关闭——四次挥手：
            （1）在数据传输完毕之后，客户端会向服务端发出一个FIN终止信号。
            （2）服务端在收到这个信号之后会向客户端发出一个ACK确认信号。
            （3）如果服务端此后也没有数据发给客户端时服务端会向客户端发送一个FIN终止信号。
            （4）客户端在收到这个信号之后会回复一个确认信号，在服务端接收到这个信号之后，服务端与客户端的通道也就关闭了。

    udp：只要客户端给服务端发送一个请求，服务端就会一次性地把所有数据发送完毕，不会对数据的完整性进行验证，在数据丢失或数据出错时也不会要求重新传输，
        所以在实时的视频、实时语音的场景下应用较多。

    quic (https://zhuanlan.zhihu.com/p/655070575): QUIC 协议实现在用户态，建立在内核态的 UDP 的基础之上，集成了 TCP 的可靠传输特性，集成了 TLS1.3 协议，保证了用户数据传输的安全。
        quic支持前向纠错，弱网丢包环境下，动态的增加一些FEC（前向纠错）数据包，可以减少重传次数，提升传输效率。


21.前端安全：
    xss：
        反射型：反射型攻击常见于前后端一体化项目，攻击者通过在url中插入恶意攻击信息，在服务端读取攻击信息后，将攻击信息拼接在HTML文件中返回给其他用户，用户浏览器收到文件后，解析执行全部代码。

        dom攻击类：此类代码通常是前端自身问题，攻击者利用js也能控制html的效果，例如innerHTML、.outerHTML、document.write()等这些属性，在暴露处主动注入恶意代码，导致浏览器解析恶意代码造成损失。

        存储类：攻击者将代码提交到服务端数据库，当用户取出数据时，恶意代码被注入界面，造成攻击，相对在各种评论模块常见。

    预防xss：
        前端过滤
        转义
        避免使用直接暴露操纵html的api
        使用httponly保护cookie
        禁止加载域外代码
        禁止提交域外代码


    CSRF：Cross-site Request Forgery 跨站请求伪造，是一种冒充受信任的用户，向服务器发送非预期请求的攻击方式
        攻击者诱导用户在自主界面下进入其他界面，在此同时，将本站的相关站点信息，包括界面信息和缓存等信息发送往指定网站，指定网站拿到信息后，伪装成用户向自主网站发起伪装成用户的攻击。

        攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。
        攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据。
        整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用”。
        跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。

    预防CSEF：
        直接禁止第三方域名
        使用数据传输加密（html展示数据和实际传输数据做特定加密）
        给 Cookie 设置合适的 SameSite来完全禁用第三方站点请求头携带 Cookie


24.浏览器兼容：
    浏览器内核可以分为两个部分：js引擎、渲染引擎，所以兼容问题一般指css兼容和js兼容

    不同浏览器css适配:
        css预处理器：less，sass
        normalize.css
        reset.css
        animate.css（动画处理）
        postcss（css处理工具）：插件Autoprefixer、插件cssnext、
        

    早期版本浏览器语法适配：
        babel polyfill

    设备兼容:
        rem
        vw\vh
        媒体查询
        flex 布局


29.webpack-dev-Server怎么跑起来：
    当我们在命令行敲下npm run start，一般后面都是运行："start": "webpack serve --open"
    这里webpack就会基于我们webpack.config.js里的配置创建一个compiler，然后基于compiler和devServer相关配置生成一个WepackDevServer实例，
    该实例会启动一个express服务来帮我们监听静态资源变化并更新。
    
    最后总结一下，webpack-dev-server 可以作为命令行工具使用，核心模块依赖是 webpack 和 webpack-dev-middleware。
    webapck-dev-server 负责启动一个 express 服务器监听客户端请求；实例化 webpack compiler；
    启动负责推送 webpack 编译信息的 webscoket 服务器；负责向 bundle.js 注入和服务端通信用的 webscoket 客户端代码和处理逻辑。
    webapck-dev-middleware 把 webpack compiler 的 outputFileSystem 改为 in-memory fileSystem；
    启动 webpack watch 编译；处理浏览器发出的静态资源的请求，把 webpack 输出到内存的文件响应给浏览器。

    每次 webpack 编译完成后向客户端广播 ok 消息，客户端收到信息后根据是否开启 hot 模式使用 liveReload 页面级刷新模式或者 hotReload 模块热替换。
    hotReload 存在失败的情况，失败的情况下会降级使用页面级刷新。

    开启 hot 模式，即启用 HMR 插件。
    hot 模式会向服务器请求更新过后的模块，然后对模块的父模块进行回溯，对依赖路径进行判断，如果每条依赖路径都配置了模块更新后所需的业务处理回调函数则是 accepted 状态，否则就降级刷新页面。
    判断 accepted 状态后对旧的缓存模块和父子依赖模块进行替换和删除，然后执行 accept 方法的回调函数，执行新模块代码，引入新模块，执行业务处理代码。


32.304的过程：
    如果客户端是第一次向服务器发出请求，则服务器返回资源和相对应的资源标识给浏览器。该资源标识就是对当前所返回资源的一种唯一标识，可以是Etag或者是Last-Modified，
    这两个字段将在图例结束后展开讲解。之后如果浏览器再次发送请求时，浏览器就会带上这个资源标识。此时，服务端就会通过这个资源标识，可以判断出浏览器的资源跟服务端此时的资源是否一致，
    如果一致，则返回304，不一致则返回200、新资源还有新的协商缓存标记值。


35.vue初始化做了什么：
    主要是干了两件事，一是创建Vue实例，二是为实例初始化属性、事件、响应式数据：
        vue初始化方法主要在vue文件的initMixin文件中，在这个文件中是vue的init初始化方法的具体内容，在init初始化中，初始化了vue生命周期，事件，render渲染，
        触发beforeCreate钩子，注入初始化数据，初始化props,methods,data,computed,watch，触发created钩子，开始挂载到对应DOM元素。

        1.选项合并，处理组件的配置内容，将传入的options与构造函数本身的options进行合并(用户选项和系统默认的选项进行合并)
        2.初始化vue实例生命周期相关的属性，定义了比如：root、root、root、parent、children、children、children、refs
        3.初始化自定义组件事件的监听,若存在父监听事件,则添加到该实例上
        4.初始化render渲染所需的slots、渲染函数等。其实就两件事：插槽的处理 和 $createElm的声明
        5.调用 beforeCreate 钩子函数，在这里就能看出一个组件在创建前和后分别做了哪些初始化
        6.初始化注入数据，隔代传参时 先inject。作为一个组件，在要给后辈组件提供数据之前，需要先把祖辈传下来的数据注入进来
        7.对props,methods,data,computed,watch进行初始化，包括响应式的处理
        8.在把祖辈传下来的数据注入进来以后 再初始化provide
            （上面三步其实是对数据和状态的初始化）
        9.调用 created 钩子函数，初始化完成，可以执行挂载了
        10.挂载到对应DOM元素上。如果组件构造函数设置了el选项，会自动挂载，所以就不用再手动调用$mount去挂载


36.前端工程化
1.vue.js的两个核心是什么
2.vue动态组件
3.Router和route
4.keep-alive
5.Ref的作用
6.Vue过滤器
7.封装组件注意的点
8.Axios拦截器
9.前端权限控制
10.v-showhe v-if区别
11.Reducer
12.Hooks原理







    
